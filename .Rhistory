summary(g)
g + geom_point(aes(color = drv)) + theme_bw(base_family="Times")
plot(myx, myy, type="l", ylim=c(-3,3))
g <- ggplot(data =testdat, as(x=myx, y=myy))
g <- ggplot(data =testdat, aes(x=myx, y=myy))
g+ geom_line(0)
g+ geom_line()
g+ geom_line(ylim=c(-3,3))
g+ geom_line()+ylim=c(-3,3)
g+ geom_line()+ylim=(-3,3)
g+ geom_line()+ylim(-3,3)
g+ geom_line()+coord_cartesian(ylim=c(-3,3))
g <- ggplot(data=pg, aes(x=displ, y=hwy, color=factor(year)))
g <- ggplot(data=mpg, aes(x=displ, y=hwy, color=factor(year)))
g+ geom_point()
g+ geom_point()+fact_grid(drv~cyl, margins=TRUE)
g+ geom_point()+facet_grid(drv~cyl, margins=TRUE)
g+ geom_point()+facet_grid(drv~cyl, margins=TRUE)+geom_smooth(method = "lm", se = FALSE, size=2, color="black")
g+ geom_point()+facet_grid(drv~cyl, margins=TRUE)+geom_smooth(method = "lm", se = FALSE, size=2, color="black")+labs(x="Displacement",y="Highway Mileage", title="Swirl Rules!")
str(diamonds)
qplot(price, data=diamonds)
range(diamonds$price)
qplot(price, data=diamonds, bindwidth=18497/30)
qplot(price, data=diamonds, binwidth=18497/30)
brk
counts
qplot(price, data=diamonds, binwidth=18497/30, fill="cut")
qplot(price, data=diamonds, binwidth=18497/30, fill=cut)
qplot(price, data=diamonds, geom="desnsity")
qplot(price, data=diamonds, geom="density")
qplot(price, data=diamonds, geom="density", color=cut)
qplot(carat, price, data=diamonds)
qplot(carat, price, data=diamonds, shape=cut
)
qplot(carat, price, data=diamonds, colorConverter()=cut)
qplot(carat, price, data=diamonds, color=cut)
qplot(carat, price, data=diamonds, color=cut)+geom_smooth(method="lm")
qplot(carat, price, data=diamonds, color=cut, facets=.~cut)+geom_smooth(method="lm")
g <- ggplot(diamonds, aes()depth, price)
g <- ggplot(diamonds, aes(depth, price)
)
summary(g)
g+geom_point(alpha=1/3)
cutpoints <- quantile(diamonds$carat, seq(0, 1, length=4), na.rm=TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds, aes(depth, price)
)
g+geom_point(alpha=1/3)+facet_grid(cut ~ car2)
diamonds[myd,]
g+geom_point(alpha=1/3)+facet_grid(cut ~ car2)+geom_smooth(method="lm", size=3, color="pink")
ggplot(diamonds, aes(carat, price))+geom_boxplot()+facet_grid(. ~ cut)
library(swirl)
swirl()
dist(dataFrame)
hclust(distxy)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5, col="blue")
abline(h=0.4, col="blue")
abline(h=0.4, col="red")
5
5
12
abline(h=0.05, col="red")
dist(dFsm)
hc
heatmap(dataMatrix, col = cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
swirl()
cmat
points(cx, cy, col=c("red", "orange", "purple", pch=3, cex=2, lwd=2))
points(cx, cy, col=c("red", "orange", "purple"), pch=3, cex=2, lwd=2)
mdist(x, y, cx, cy)
apply(distTmp, mean(distTmp), which.min)
apply(distTmp, 2, which.min)
points(x, y, pch=19, cex=2, col = cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col=cols1, pch=8, cex=2, lwd=2)
mdist(x, y, newCx, newCy)
apply(distTmp2, 2 which.min)
apply(distTmp2, 2, which.min)
pints(x, y, pch=19, cex=2, cols1[newClust2])
points(x, y, pch=19, cex=2, cols1[newClust2])
points(x, y, pch=19, cex=2, col=cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
pints(finalCx, finalCy, col=cols1, pch=9, cex=2, lwd=2)
points(finalCx, finalCy, col=cols1, pch=9, cex=2, lwd=2)
kmeans(dataFrame, centers=3)
kmObj$iter
plot(x, y, col = kmObj$cluster, pch = 19, cex=2)
points(kmObj$centers, col=c("black","red","green"), pch=3, cex=3, lwd=3)
plot(x, y, col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
points(kmObj$centers, col=c("black","red","green"), pch=3, cex=3, lwd=3)
plot(x, y, col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
plot(x, y, col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R", local=TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu%*%t(matv)
matu%*%diag%*%t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2$v[,1..2]
svd2$v[,1]
svd2$v[,1:2]
svd2$d
dim(faceData)
?mean
svd1$u[,1]
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a2 <- (svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
)
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
a2 <- svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5])
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,5:10] %*% diag(svd1$d[5:10]) %*% t(svd1$v[,5:10]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
library(swirl)
swirl()
dim(ssd)
names(ssd[,562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject=1)
sub1 <- subset(ssd, subject==1)
dim(sub1)
names(columns(ssd, 1:12))
names(colSums(ssd, 1:12))
names(ssd[, 1:12])
names(sub1[1:12])
myedit("showXY.R")
showMe(c(1:6))
mdist <- dist(x[,1:3])
mdist <- dist(sub()[,1:3])
mdist <- dist(sub1[,1:3])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col=unclass(sub1$activity))
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col=unclass(sub1$activity))
svd1 <- svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxcon <- which.max(svd1$v[,2])
maxCon <- which.max(svd1$v[,2])
mdist
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col=unclass(sub1$activity))
names(sub1[maxCon])
kCLust<- kmeans(sub1[,-c(562,563)], centers=6)
kCLust<- kmeans(sub1[,-c(562,563)], centers=6)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- which(kClust$size==29)
plot(kClust$centers[laying,1:12], pch=19, ylab="Laying Cluster")
names(sub1[,1:3])
walkdown <- which(kClust$size==49)
plot(kClust$centers[laying,1:12], pch=19, ylab="Laying Cluster")
plot(kClust$centers[walkdown,1:12], pch=19, ylab="Laying Cluster")
plot(kClust$centers[walkdown, 1:12],pch=19,ylab="Walkdown Cluster")
library(swirl)
swirl()
dim(pm0)
head(pm0)
cnames
cnames <- strsplit(cnames, "|", fixd == TRUE)
cnames <- strsplit(cnames, "|", fixed == TRUE)
cnames <- strsplit(cnames, "|", fixed = TRUE)
cnames
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0 <- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0, x1)
boxplot(log10(x0), log10(x1)
)
negative <- x1<0
sum(negative, na.rm=TRUE)
mean(negative, na.rm=TRUE)
dates <- pm1$Date
str(dates)
dates <- as.Date(as.character(dates), "%Y%m%d")
head(dates)
plot(dates[negative], "month")
hist(dates[negative], "month")
str(site0)
bith <- intersect(site0, site1)
both <- intersect(site0, site1)
both
head(pm0)
cnt0 <- subset(pm0, State.Code==36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code==36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub <- subset(cnt0, County.Code == 63 & Site.ID == 2008)
pm1sub <- subset(cnt1, County.Code == 63 & Site.ID == 2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mfrow=c(1,2), mar = c(4,4,2,1))
plot(dates0, x0sub, pch=20)
abline(x0sub, na.rm=TRUE, lwd = 2)
abline(lwd = 2, median(x0sub, na.rm = TRUE))
median()
?median
?abline
abline(lwd = 2, a = median(x0sub, na.rm = TRUE))
abline(lwd = 2, a = median(x0sub, na.rm = TRUE), b = 0)
abline(h = median(x0sub, na.rm = TRUE),lwd=2)
plot(dates1, x1sub, pch=20)
abline(h = median(x1sub, na.rm = TRUE),lwd=2)
rng <- range(x0sub, x1sub, na.rm = TRUE)
rng
mn0 <- with(om0, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn0)
mn1 <- with(pm1, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame(state=names(mn0), mean=mn0)
d1 <- data.frame(state=names(mn1), mean=mn1)
mrg <- merge(d0, d1, by="state")
dim(mrg)
head(mrg)
with(mrg, plot(rep(1,52),  mrg[,2], xlim=c(.5,2.5)))
with(mrg, points(rep(2,52), mrg[,3))
with(mrg, points(rep(2,52), mrg[,3)))
with(mrg, points(rep(2,52), mrg[,3*))
with(mrg, points(rep(2,52), mrg[,3]))
segments(rep(1,52), mrg[,2],rep(2,52), mrg[,3] )
mrg[mrg$mean.x < mrg$mean.y, ]
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
1 - ((2+1)/36)
deck
52
4/52
0
5*(12/52)
4/52
info()
12/52
3/51
2/51
0.8*1.672
0.8*1.6/2
0.64
mypdf
?integrate
integrate(mypdf, lower=0, upper=1.6)
1
sqrt(2)
99.7*0.001
0.001*0.997
0.003*0.999
(1-0.001)*(1-0.997)
(1-0.001)*(1-0.985)
0.000997/(0.000997*0.014985)
0.000997/(0.000997+0.014985)
3.5
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
.5*(edh+edl)
integrate(myfunc,lower=0, ipper=2)
integrate(myfunc,lower=0, upper=2)
spop
mean(spop)
allsam
apply(allsam, 1, mean)
mean(smeans)
library(swirl)
swirl()
dice_sqr
ex2_fair <- sum(dice_sqr, dice_fair)
ex2_fair <- sum(dice_sqr* dice_fair)
ex2_fair-3.4^2
ex2_fair-3.5^2
sum(dice_sqr*dice_high) - edh^2
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
choose(5,3) * .8^x * .2^(5-3)
choose(5,3) * .8^3 * .2^(5-3)
choose(5,3) * .8^3 * .2^(5-3) + choose(5,4) * .8^4 * .2^(5-4) + choose(5,5) * .8^5 * .2^(5-5)
?pbinom
pbinom(2, 5, .8, lower.tail = FALSE)
qnorm(.1)
0
?qnorm
qnorm(.975, 3, 2)
1.96*2 + 3
?pnorm
pnorm(1200, 1020, 50, lower.tail=FALSE)
qnorm(.975, 3, 2)
pnorm((1200-1020)/50,lower.tail=FALSE)
qnorm(.75, 1020, 50, lower.tail = FALSE)
qnorm(.75,mean=1020,sd=50)
0
pnorm(qnorm(.53))
qnorm(pnorm(.53))
?ppois
ppois(3, 2.5 * 4)
?pbinom
pbinom(5, 1000, .01)
ppois(5, 1000*.01)
coinPlot(10)
coinPlot(10000)
qnorm(.95)
qnorm(.975)*sqrt(p'(1-p')/100)
qnorm(.975)*sqrt(2(1-2)/100)
qnorm(.975)
.6 + c(-1,1)*qnorm(.975)*sqrt(.6*.4/100)
x$conf.int
binom.test(60, 100)
binom.test(60, 100)$conf.int
mywald(.2)
ACCompar(20)
lamb = 5/94.32
lamb <- 5/94.32
lamb + c(-1,1)*qnorm(.975)*sqrt(lamb)
lamb + c(-1,1)*qnorm(.975)*sqrt(lamb/94.32)
poisson.test(5, 94.32)
poisson.test(5, 94.32)$conf
pnorm(70, 80 10, lower.tail=FALSE)
pnorm(70, 80, 10, lower.tail=FALSE)
pnorm(70, 80, 10)
qnorm(.95, 1100, 75, lower.tail = FALSE)
qnorm(.95, 1100, 75)
dpois(3, 15)
dpois(10, 15)
rpois(10, 15)
ppois(10, 15)
qnorm(.95, 1100, 75, lower.tail = FALSE)
norm <- rnorm(100, 100, 75)
norm
sum(norm)/100
norm <- rnorm(100, 1100, 75)
sum(norm)/100
?pbinom
pbinom(4, 5, .5)
pbinom(5, 5, .5)
pbinom(5, 5, .5, lower.tail = FALSE)
pbinom(4, 5, .5, lower.tail = FALSE)
dbinom(4:5,5,0.5)
1 - sum(dbinom(4:5,5,0.5))
sum(dbinom(4:5,5,0.5))
?rnorm
mean(rnorm(100, 1100, 75) )
qnorm(.95, 1102, 75)
library(swirl)
siwrl()
swirl()
myplot(2)
myplot(20)
myplot2(2)
qt(.975, 2)
myplot2(20)
sleep
range(g1)
range(g2)
difference <- g2 - g1
mean(difference)
s <- sd(difference)
mn + c(-1,1) + 9*s/sqrt(n)
mn + c(-1,1) + 9*s/sqrt(10)
mn + c(-1,1)*qt(.975,9)*s/sqrt(10)
?t.test
t.test(difference)$conf.int
sp <- (7*15.34)^2 + (20*18.23)^2
sp <- 7*15.34^2 + 20*18.23^2
ns <- 8 -1 + 21 -1
sp <- sqrt(sp/ns)
132.86 - 127.44 + c(-1,1)*qt(.95,ns)*sp/sqrt(ns)
132.86-127.44+c(-1,1)*qt(.975,ns)*sp*sqrt(1/8+1/21)
?var
var(g1,g2)
sp <- sqrt((9*var(g1)+9*var(g2))/18)
var(g1,g2)
md + c(-1,1)*qt(.975,18)*sp*sqrt(1/5)
?t.test
t.test(g1,g2, paired=FALSE, var.equal = TRUE)$conf
t.test(g2,g1, paired=FALSE, var.equal = TRUE)$conf
t.test(g2,g1, paired=TRUE)$conf
num <- (15.34^2/8 + 18.23^2/21)^2
den <- (15.34^2/8)^2/(8-1) + (18.23^2/21)^2/(21-1)
mydf <- num/den
132.86 - 127.44 + c(1,-1)*qt(.975,mydf)*sqrt(15.34^2/8 + 18.23^2/21)
132.86 - 127.44 + c(-1,1)*qt(.975,mydf)*sqrt(15.34^2/8 + 18.23^2/21)
10/sqrt(100)
2
2/10/sqrt(16)
2/(10/sqrt(16))
15
qt(.95, 15)
dim(fs)
t.test(fs$sheight-fs$fheight, paired=TRUE)
t.test(fs$sheight-fs$fheight)
11.7885 * sd(fs$sheight-fs$fheight)/sqrt(1078)
ybin
mybin
0.03515625
8
?pt
pt(2.5, 15,lower.tail = FALSE)
?qnorm
qnorm(.95,2)
qnorm(.95)
qnorm(.99)
?promn
?pnorm
pnorm(0.95)
pnorm(2)
pnorm(2, lower.tail = FALSE)
mybin
?pbinom
pbinom(6, size=8, prob=0.5,lower.tail = FALSE)
pbinom(7, size=8, prob=0.5,lower.tail = TRUE)
?ppois
ppois(9, lambda = 5, lower.tail = FALSE)
1100 + c(-1,1)*qt(.95,8)*30/sqrt(9)
1100 + c(-1,1)*qt(.975,8)*30/sqrt(9)
?t.test
sp <- sqrt((9*0.6+9*0.68)/18)
sp
-2 + c(-1,1)*qt(.975,18)*0.8*sqrt(1/5)
sp <- sqrt((99*0.5+99*2)/18)
-2 + c(-1,1)*qt(.975,198)*sp*sqrt(1/99 + 1/99)
2 + c(-1,1)*qt(.975,198)*sp*sqrt(1/99 + 1/99)
sp <- sqrt((99*0.5+99*2)/198)
2 + c(-1,1)*qt(.975,198)*sp*sqrt(1/99 + 1/99)
quan <- qt(.9, 16)
sp <- sqrt((8*a.5^2 + 8*1.8^2)/16)
sp <- sqrt((8*1.5^2 + 8*1.8^2)/16)
-3 -1 + c(-1,1)*quan*sp*(1/9 + 1/9)^.5
quan <- qt(.95, 16)
-3 -1 + c(-1,1)*quan*sp*(1/9 + 1/9)^.5
data <- read.csv("activity.csv")
setwd("C:/coursera/datascience/RepData_PeerAssessment1")
data <- read.csv("activity.csv")
stepsByInterval <- aggregate(data$steps, by=list(date=data$interval), FUN=sum)
View(stepsByInterval)
stepsByInterval <- aggregate(data$steps, by=list(date=data$interval), FUN=sum, na.rm=TRUE)
?max
max(stepsByInterval)
pmax(stepsByInterval)
which.max(stepsByInterval)
View(stepsByInterval)
which.max(stepsByInterval$x)
stepsByInterval[which.max(stepsByInterval$x)]$date
stepsByInterval[which.max(stepsByInterval$x)]
stepsByInterval[which.max(stepsByInterval$x),]
stepsByInterval[which.max(stepsByInterval$x),]$date
stepsByInterval <- aggregate(data$steps, by=list(interval=data$interval), FUN=sum, na.rm=TRUE)
stepsByInterval[which.max(stepsByInterval$x),]$interval
sum(is.na(data$steps))
stepsMedianByInterval <- aggregate(data$steps, by=list(interval=data$interval), FUN=median, na.rm=TRUE)
View(stepsMedianByInterval)
View(stepsMedianByInterval)
which(grepl(125, data$interval))
?wich
?which
which(data$interval==125)
which(stepsMedianByInterval$interval==125)
data2 <- data
stepsByInterval[which(stepsMedianByInterval$interval==125),]
stepsByInterval[which(stepsMedianByInterval$interval==125),]$x
stepsMedianByInterval[which(stepsMedianByInterval$interval==125),]$x
data2$steps[is.na(data2$steps)] <- stepsMedianByInterval[which(stepsMedianByInterval$interval==data2$interval),]$x
View(data2)
View(data)
stepsByDay2 <- aggregate(data2$steps, by=list(date=data2$date), FUN=sum)
View(stepsByDay2)
View(data2)
View(stepsMedianByInterval)
